{"version":3,"sources":["components/ControlPannel.js","components/Loader.js","components/LoaderCode.js","App.js","serviceWorker.js","index.js"],"names":["ControlPannel","props","className","type","value","this","values","sizeValue","onChange","evt","min","max","widthValue","speedValue","colorValue","React","Component","Loader","newSize","document","getElementById","style","setProperty","width","speed","color","updateColor","updateSize","updateWidth","updateSpeed","LoaderCode","e","code","el","createElement","body","appendChild","select","execCommand","removeChild","size","Math","round","cssCode","htmlCode","onClick","copyCode","id","App","state","controlPannel","idetifier","target","setState","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAEqBA,E,+KACVC,GAAO,IAAD,OACT,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,wBAAf,qBACA,yCAEI,2BACIC,KAAK,QACLC,MAAOC,KAAKJ,MAAMK,OAAOC,UACzBC,SAAU,SAACC,GAAD,OAAS,EAAKR,MAAMO,SAASC,EAAI,SAC3CC,IAAI,IACJC,IAAI,SAIZ,wCAEI,2BACIR,KAAK,QACLC,MAAOC,KAAKJ,MAAMK,OAAOM,WACzBJ,SAAU,SAACC,GAAD,OAAS,EAAKR,MAAMO,SAASC,EAAI,UAC3CC,IAAI,OAIZ,wCAEI,2BACIP,KAAK,QACLC,MAAOC,KAAKJ,MAAMK,OAAOO,WACzBL,SAAU,SAACC,GAAD,OAAS,EAAKR,MAAMO,SAASC,EAAI,UAC3CC,IAAI,OAIZ,+BACI,0BAAMR,UAAU,uBAAhB,UACA,2BACIC,KAAK,QACLC,MAAOC,KAAKJ,MAAMK,OAAOQ,WACzBN,SAAU,SAACC,GAAD,OAAS,EAAKR,MAAMO,SAASC,EAAI,kB,GAzCxBM,IAAMC,WCA5BC,E,mLACNC,GACPA,GAAS,KACTC,SAASC,eAAe,QAAQC,MAAMC,YAAY,SAASJ,K,kCAEnDK,GACRA,GAAO,KACPJ,SAASC,eAAe,QAAQC,MAAMC,YAAY,UAAUC,K,kCAEpDC,GACRA,GAAQ,GACRA,GAAO,IACPL,SAASC,eAAe,QAAQC,MAAMC,YAAY,UAAUE,K,kCAEpDC,GACRN,SAASC,eAAe,QAAQC,MAAMC,YAAY,UAAUG,K,6BAGzDxB,GAOH,OANAI,KAAKqB,YAAYrB,KAAKJ,MAAMK,OAAOmB,OACnCpB,KAAKsB,WAAWtB,KAAKJ,MAAMK,OAAOC,WAClCF,KAAKuB,YAAYvB,KAAKJ,MAAMK,OAAOM,YACnCP,KAAKwB,YAAYxB,KAAKJ,MAAMK,OAAOO,YACnCR,KAAKqB,YAAYrB,KAAKJ,MAAMK,OAAOmB,OAG/B,yBAAKvB,UAAU,kBACX,yBAAKA,UAAU,gB,GA3BKa,IAAMC,WCArBc,E,iLACRC,EAAEC,GACP,IAAMC,EAAKd,SAASe,cAAc,YAClCD,EAAG7B,MAAQ4B,EACXb,SAASgB,KAAKC,YAAYH,GAC1BA,EAAGI,SACHlB,SAASmB,YAAY,QACrBnB,SAASgB,KAAKI,YAAYN,K,6BAEvBhC,GAAO,IAAD,OACLuC,EAAOnC,KAAKJ,MAAMK,OAAOC,UAAY,KACrCgB,EAAQlB,KAAKJ,MAAMK,OAAOM,WAAa,KACvCa,EAAQpB,KAAKJ,MAAMK,OAAOmB,MAC1BD,EAAQiB,KAAKC,MAAMrC,KAAKJ,MAAMK,OAAOO,WAAW,GAAG,KAAK,IAAM,IAC9D8B,EAAO,+BAENH,EAFM,0BAGLA,EAHK,+CAKLjB,EALK,gDAMDA,EANC,kBAMcE,EANd,6DAQKD,EARL,oHAePoB,EAAQ,6BAEZ,OACI,yBAAK1C,UAAU,QACX,6BACI,yBAAKA,UAAU,eAAf,aAAuC,0BAAMA,UAAU,aAAa2C,QAAS,SAACd,GAAD,OAAK,EAAKe,SAASf,EAAEa,KAA3D,cACvC,yBAAKG,GAAG,aACHH,IAGT,6BACI,yBAAK1C,UAAU,eAAf,YAAsC,0BAAMA,UAAU,aAAa2C,QAAS,SAACd,GAAD,OAAK,EAAKe,SAASf,EAAEY,KAA3D,aACtC,yBAAKI,GAAG,YACHJ,S,GA1Ce5B,IAAMC,WC0C/BgC,E,YAtCb,WAAY/C,GAAQ,IAAD,8BACjB,4CAAMA,KACDgD,MAAQ,CACXC,cAAe,CACbzB,MAAO,UACPlB,UAAW,KACXK,WAAY,IACZC,WAAY,OAPC,E,wEAYRJ,EAAI0C,GACb,IAAIjC,EAAUT,EAAI2C,OAAOhD,MACzBC,KAAKgD,SAAS,CACZH,cAAe,CACbzB,MAAoB,UAAZ0B,EAAuBjC,EAAUb,KAAK4C,MAAMC,cAAczB,MAClElB,UAAwB,SAAZ4C,EAAsBjC,EAAUb,KAAK4C,MAAMC,cAAc3C,UACrEK,WAAyB,UAAZuC,EAAuBjC,EAAUb,KAAK4C,MAAMC,cAActC,WACvEC,WAAyB,UAAZsC,EAAuBjC,EAAUb,KAAK4C,MAAMC,cAAcrC,gB,+BAKpE,IAAD,OACN,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CACEI,OAAQD,KAAK4C,MAAMC,cACnB1C,SAAU,SAACC,EAAI0C,GAAL,OAAmB,EAAKxB,WAAWlB,EAAI0C,MAEnD,kBAAC,EAAD,CAAQ7C,OAAQD,KAAK4C,MAAMC,gBAC3B,kBAAC,EAAD,CAAY5C,OAAQD,KAAK4C,MAAMC,qB,GAjCrBnC,IAAMC,WCOJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAASC,eAAe,SD2H3C,kBAAmByC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c7fbf0ad.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class ControlPannel extends React.Component{\r\n    render(props){\r\n        return(\r\n            <div className=\"controlpannel\">\r\n                <div className=\"controlpannel__title\">Ajust Your Loader</div>\r\n                <label>\r\n                    Radius:\r\n                    <input \r\n                        type=\"range\" \r\n                        value={this.props.values.sizeValue}\r\n                        onChange={(evt) => this.props.onChange(evt,\"size\")}\r\n                        min=\"5\"\r\n                        max=\"400\"\r\n                    />\r\n                </label>       \r\n                \r\n                <label>\r\n                    Width:\r\n                    <input \r\n                        type=\"range\" \r\n                        value={this.props.values.widthValue}\r\n                        onChange={(evt) => this.props.onChange(evt,\"width\")}\r\n                        min=\"1\"\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    Speed:\r\n                    <input \r\n                        type=\"range\" \r\n                        value={this.props.values.speedValue}\r\n                        onChange={(evt) => this.props.onChange(evt,\"speed\")}\r\n                        min=\"4\"\r\n                    />\r\n                </label>\r\n\r\n                <label>\r\n                    <span className=\"controlpannel__span\">Color:</span>   \r\n                    <input \r\n                        type=\"color\" \r\n                        value={this.props.values.colorValue}\r\n                        onChange={(evt) => this.props.onChange(evt,\"color\")}\r\n                    />\r\n                </label>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nexport default class Loader extends React.Component{\r\n    updateSize(newSize){\r\n        newSize+=\"px\";\r\n        document.getElementById('root').style.setProperty(\"--size\",newSize);\r\n    }\r\n    updateWidth(width){\r\n        width+=\"px\";\r\n        document.getElementById('root').style.setProperty(\"--width\",width);\r\n    }\r\n    updateSpeed(speed){\r\n        speed /=30;\r\n        speed+=\"s\";\r\n        document.getElementById('root').style.setProperty(\"--speed\",speed);\r\n    }\r\n    updateColor(color){\r\n        document.getElementById('root').style.setProperty(\"--color\",color);\r\n    }\r\n\r\n    render(props){\r\n        this.updateColor(this.props.values.color);\r\n        this.updateSize(this.props.values.sizeValue);\r\n        this.updateWidth(this.props.values.widthValue);\r\n        this.updateSpeed(this.props.values.speedValue);\r\n        this.updateColor(this.props.values.color);\r\n\r\n        return(\r\n            <div className=\"loader-wrapper\">\r\n                <div className=\"loader\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\n\r\nexport default class LoaderCode extends React.Component{\r\n    copyCode(e,code){\r\n        const el = document.createElement('textarea');\r\n        el.value = code;\r\n        document.body.appendChild(el);\r\n        el.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(el);\r\n    }\r\n    render(props){\r\n        let size = this.props.values.sizeValue + \"px\";\r\n        let width = this.props.values.widthValue + \"px\";\r\n        let color = this.props.values.color;\r\n        let speed = Math.round(this.props.values.speedValue/30*100)/100 + \"s\";\r\n        let cssCode = \r\n    `.loader{\r\n    width: ${size};\r\n    height: ${size};\r\n    margin: 0 auto;\r\n    border: ${width} solid transparent;\r\n    border-top: ${width} solid ${color};\r\n    border-radius: 50%;\r\n    animation: rotate ${speed} infinite linear;\r\n}\r\n\r\n@keyframes rotate{\r\n    from{transform: rotate(0)}\r\n    to{transform: rotate(360deg)}\r\n}`\r\n        let htmlCode = `<div class=\"loader\"></div>`;\r\n        \r\n        return(\r\n            <div className=\"code\">\r\n                <div >\r\n                    <div className=\"code__title\">HTML CODE <span className=\"code__copy\" onClick={(e)=>this.copyCode(e,htmlCode)}>copy html</span></div>\r\n                    <pre id=\"html-code\">\r\n                        {htmlCode}\r\n                    </pre>\r\n                </div>\r\n                <div >\r\n                    <div className=\"code__title\">CSS CODE <span className=\"code__copy\" onClick={(e)=>this.copyCode(e,cssCode)}>copy css</span></div>\r\n                    <pre id=\"css-code\">\r\n                        {cssCode}\r\n                    </pre>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\nimport ControlPannel from './components/ControlPannel';\nimport Loader from './components/Loader';\nimport LoaderCode from './components/LoaderCode';\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      controlPannel: {\n        color: \"#000000\",\n        sizeValue: \"85\",\n        widthValue: \"5\",\n        speedValue: \"20\"\n      }\n    }\n  }\n\n  updateSize(evt,idetifier){\n    let newSize = evt.target.value;\n    this.setState({\n      controlPannel: {\n        color: (idetifier===\"color\") ? newSize : this.state.controlPannel.color,  \n        sizeValue: (idetifier===\"size\") ? newSize : this.state.controlPannel.sizeValue,  \n        widthValue: (idetifier===\"width\") ? newSize : this.state.controlPannel.widthValue,\n        speedValue: (idetifier===\"speed\") ? newSize : this.state.controlPannel.speedValue,\n      }\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"app\">\n        <ControlPannel \n          values={this.state.controlPannel} \n          onChange={(evt,idetifier) => this.updateSize(evt,idetifier)}\n        />\n        <Loader values={this.state.controlPannel} />\n        <LoaderCode values={this.state.controlPannel} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}